<?php
/**
 * @file devshop_pull.module
 * Provides a Hosting Queue and a URL callback for remote services to ping, in
 * order to trigger a Pull Code task.
 *
 * Used to keep a dev server up to date with the commits of projects.
 *
 * @TODO: This module needs some re-architecting, because there are a few things
 * we might want to do "on-commit".  Also, we should be able to handle
 * integrations with any system, not just github.
 *
 */

define('DEVSHOP_PULL_DISABLED', 0);
define('DEVSHOP_PULL_QUEUE', 1);
define('DEVSHOP_PULL_CALLBACK', 2);

define('DEVSHOP_PULL_STATUS_OK', 1);
define('DEVSHOP_PULL_STATUS_ACCESS_DENIED', 2);
define('DEVSHOP_PULL_STATUS_INVALID_CODE', 3);

// These are github's Webhook callback IPs.
// This list grows occaisonally...
define('DEVSHOP_PULL_DEFAULT_ALLOWED_IPS',"
  207.97.227.253
  50.57.128.197
  108.171.174.178
  50.57.231.61
  204.232.175.64
  192.30.252.0
  204.232.175.75
");

// The base URL to use for the Post Commit callback.
define('DEVSHOP_PULL_CALLBACK_URL', 'devshop/pull');

/**
 * Implementation of hook_perm()
 */
function devshop_pull_perm() {
  return array(
    'configure devshop pull',
  );
}

/**
 * Implementation of hook_menu()
 */
function devshop_pull_menu() {
  $items['admin/hosting/devshop/pull'] = array(
    'title' => 'Pull',
    'description' => 'Configure Pull Code URL callback ',
    'page callback' => 'devshop_pull_settings_page',
    'access arguments' => array('administer hosting settings'),
    'file' => 'devshop_pull.settings.inc',
    'tab_parent' => 'admin/hosting/devshop',
    'type' => MENU_LOCAL_TASK,
  );
  $items[DEVSHOP_PULL_CALLBACK_URL] = array(
    'page callback' => 'devshop_pull_callback',
    'access callback' => TRUE,
    'file' => 'devshop_pull.inc',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_hosting_queues()
 */
function devshop_pull_hosting_queues() {
  $items['pull'] = array(
    'type' => 'batch', 
    'name' => t('Pull queue'), 
    'description' => t('Run git pull on projects configured to do so.'), 
    'total_items' => devshop_pull_get_platforms(10),
    'frequency' => strtotime("1 minute", 0), 
    'singular' => t('project'), 
    'plural' => t('projects'),
  );
  return $items;
}

/**
 * Implements hook_devshop_project_settings
 */
function devshop_pull_devshop_project_settings(){
  return array(
    'pull_enabled' => array(
      '#title' => t('Pull on Commit'),
      '#node_type' => 'platform',
      '#type' => 'checkbox',
      '#description' => t('When DevShop receives commit notification, run <em>Pull Code</em> task.'),
    ),
    // Pull reset won't work until we are storing the settings in the project drush context.
    //'pull_reset' => array(
    //  '#title' => t('Reset files'),
    //  '#node_type' => 'platform',
    //  '#type' => 'checkbox',
    //  '#description' => t('When runing a <em>Pull Code</em> task triggered by a git commit, run git reset --hard just before.'),
    //),
  );
}

/**
 * Implements hook_form_alter().
 */
function devshop_pull_form_alter(&$form, &$form_state, $form_id) {
  
  // On Projects, add "Choose Pull Method"
  if ($form_id == 'project_node_form') {
    // Get node
    $node = $form['#node'];
    
    // Get default value
    if (is_null($node->pull_method)) {
      $node->pull_method = DEVSHOP_PULL_DISABLED;
    }
   
    //All settings git pull in project page
    $form['git_settings'] = array(
      '#type' => 'fieldset',
      '#title' => t('Git Settings'),
    );
 
    $form['git_settings']['pull_method'] = array(
      '#title' => 'Automatic Git Pull Method',
      '#type' => 'radios',
      '#description' => t('Choose the method of regularly calling "Pull Code". See !link to configure the queue. See !link2 to configure URL Callback.', array(
        '!link' => l(t('Hosting > Queues'), 'admin/hosting/queues'),
        '!link2' => l(t('Hosting > DevShop Pull Settings'), 'admin/hosting/devshop_pull')
      )),
      '#default_value' => $node->pull_method,
      '#options' => array(
        DEVSHOP_PULL_DISABLED => t('Pull disabled.'),
        DEVSHOP_PULL_QUEUE => t('Pull on queue (every minute).'),
        DEVSHOP_PULL_CALLBACK => t('Pull on URL Callback (ie. GitHub Webhook)'),
      ),
    );
    module_load_include('inc', 'devshop_pull');
    $form['git_settings']['pull_url'] = array(
      '#type' => 'textfield',
      '#title' => t('Pull Trigger URL'),
      '#value' => _devshop_pull_callback_url($node),
      '#description' => t('Configure your repo to hit this URL when it receives a commit.'),
      '#attributes' => array(
        'onclick' => 'this.select()',
      ),
    );
    
    // @TODO: is there a better way to save certain values? We lose data without these.
    $form['git_settings']['last_pull'] = array(
      '#type' => 'value',
      '#value' => $node->last_pull,
    );
    $form['git_settings']['last_pull_status'] = array(
      '#type' => 'value',
      '#value' => $node->last_pull_status,
    );
    $form['git_settings']['last_pull_ip'] = array(
      '#type' => 'value',
      '#value' => $node->last_pull_ip,
    );
  }
}

/**
 * Implements hook_nodeapi()
 */
function devshop_pull_nodeapi(&$node, $op, $a3 = null) {
  
  // PROJECTS
  if ($node->type == 'project'){
    
    // View Project
    if ($op == 'view' && $node->pull_method == DEVSHOP_PULL_CALLBACK){
      module_load_include('inc', 'devshop_pull');
      $url = _devshop_pull_callback_url($node);
      $pull_method .= '<br>' . l(_filter_url_trim($url, 30), $url);
      
      $status = (int) $node->last_pull_status;
      
      // If access denied, provide link to settings page
      if ($status == DEVSHOP_PULL_STATUS_ACCESS_DENIED){
        $output = '<strong>' . t('Access Denied') . '</strong><br />';
        $output .= '<em>' . hosting_format_interval($node->last_pull) . '</em><br />';
        $output .= t('Commit notification recieved from %ip, but the IP is not allowed to trigger tasks.  See !link.', array(
          '!link' => l(t('DevShop Pull Settings'), 'admin/hosting/devshop_pull'),
          '%ip' => $node->last_pull_ip,
        ));

      }
      // If OK, show how much time has passed.
      elseif ($status == DEVSHOP_PULL_STATUS_OK) {
        $output = hosting_format_interval($node->last_pull);
      }
      // Otherwise, we assume no commit notification recieved.
      else {
        $output .= t('No commit notifications received.  Setup your Git host to ping');
        $output .= strtr(" <input type='textfield' value='!url' onclick='this.select();'/>", array('!url' => $url));
      }
      $node->content['info']['last_pull'] = array(
        '#type' => 'item',
        '#title' => t('Last Commit'),
        '#weight' => 32,
        '#value' => $output,
      );
    }

    // Load Project
    elseif ($op == 'load'){
      $data = db_fetch_array(db_query('SELECT * FROM {hosting_devshop_pull_projects} WHERE project_nid =  %d', $node->nid));
      if (!empty($data)) {
        unset($data['project_nid']);
        return $data;
      }
    }
  
    // Insert Project
    elseif ($op == 'insert'){
      db_query('INSERT INTO {hosting_devshop_pull_projects} (project_nid, pull_method, last_pull, last_pull_status, last_pull_ip) VALUES (%d, %d, %d, %d, "%s")', $node->nid, $node->pull_method, $node->last_pull, $node->last_pull_status, $node->last_pull_ip);

    }
    // Update Project
    elseif ($op == 'update'){
      // We can't update because devshop_pull might have been enabled after
      // project exists
      db_query('DELETE FROM {hosting_devshop_pull_projects} WHERE project_nid = %d', $node->nid);
      db_query('INSERT INTO {hosting_devshop_pull_projects} (project_nid, pull_method, last_pull, last_pull_status, last_pull_ip) VALUES (%d, %d, %d, "%s", %d)', $node->nid, $node->pull_method, $node->last_pull, $node->last_pull_status, $node->last_pull_ip);
    
    }
    // Delete Project
    elseif ($op == 'delete'){
      db_query('DELETE FROM {hosting_devshop_pull_projects} WHERE project_nid = %d', $node->nid);
      
    }
  }
  
  // PLATFORMS
  elseif ($node->type == 'platform'){
    
    // Load Platform
    if ($node->type == 'platform' && $op == 'load'){
      $data = db_fetch_array(db_query("SELECT * FROM {hosting_devshop_pull_platforms} WHERE platform_nid = %d", $node->nid));
      if (!empty($data)){
        unset($data['project_nid']);
        return $data;
      }
    }
    
    // Insert Platform
    elseif ($op == 'insert'){
      db_query('INSERT INTO {hosting_devshop_pull_platforms} (platform_nid, project_nid, pull_enabled, pull_reset) VALUES (%d, %d, %d, %d)', $node->nid, $node->project_nid, $node->pull_enabled, $node->pull_reset);
    }
    
    // Update Platform
    elseif ($op == 'update'){
      db_query('DELETE FROM {hosting_devshop_pull_platforms} WHERE platform_nid = %d', $node->nid);
      db_query('INSERT INTO {hosting_devshop_pull_platforms} (platform_nid, project_nid, pull_enabled, pull_reset) VALUES (%d, %d, %d, %d)', $node->nid, $node->project_nid, $node->pull_enabled, $node->pull_reset);
    }
    
    // Delete Project
    elseif ($op == 'delete'){
      db_query('DELETE FROM {hosting_devshop_pull_platforms} WHERE platform_nid = %d', $node->nid);
    }
  }
}

/**
 * Get a number of platforms that have their pull queue enabled.
 * 
 * @param $limit
 *   Limit to a maximum of this number of platforms.
 * @return
 *   An array of site nodes that have a pull queue enabled.
 *
 * @TODO Convert to check pull queue sites.
 */
function devshop_pull_get_platforms($limit = 5) {
  $result = db_query("SELECT COUNT(dpo.object_nid) FROM {hosting_devshop_project_object} dpo LEFT JOIN {hosting_devshop_pull_projects}  d ON dpo.project_nid=d.project_nid WHERE d.pull_method = %d  AND dpo.object_type='platform' ORDER BY d.last_pull ASC, dpo.object_nid ASC", array(DEVSHOP_PULL_QUEUE));
  return db_result($result);
}

/**
 * Implementation of hook_hosting_TASK_TYPE_task_rollback().
 */
function devshop_pull_hosting_devshop_pull_task_rollback($task, $data) {
  $project = node_load($task->ref->project_nid);
  watchdog('devshop', 'Pull FAILED on project: @alias', array('@alias' => $project->title));
  db_query('UPDATE {hosting_devshop_pull_projects} SET last_pull = %d, last_pull_status = %d WHERE project_nid = %d', time(), 0, $task->ref->project_nid);
}

/**
 * Implementation of hook_post_hosting_TASK_TYPE_task().
 */
function devshop_pull_post_hosting_devshop_pull_task($task, $data) {
  $project = node_load($task->ref->project_nid);
  watchdog('devshop', 'Pull SUCCESS on project: @alias', array('@alias' => $project->title));
}

/**
 * Implementation of hosting_QUEUE_TYPE_queue().
 */
function hosting_pull_queue($count) {

  $result = db_query("SELECT d.*  FROM {hosting_devshop_project_object} dpo LEFT JOIN {hosting_devshop_pull_projects}  d ON dpo.project_nid=d.project_nid WHERE d.pull_method = %d AND dpo.object_type='platform' ORDER BY d.last_pull ASC, dpo.object_nid ASC", array(DEVSHOP_PULL_QUEUE));
  
  while ($project = db_fetch_object($result)) {
    $project_node = node_load($project->project_nid);
    
    // Create the hosting task
    // @TODO: We maybe don't need to pass args here? its saved in the context
    // Check for environments set to pull
    $environments_to_pull = array();
    foreach ($project_node->settings as $env => $settings) {
      if ($settings['pull_enabled']) {
        $environments_to_pull[] = $env;
      }
    }
    $args = array();
    $args['environments'] = implode(' ', $environments_to_pull);
    hosting_add_task($project_node->nid, 'devshop-pull', $args);
    
    module_invoke_all('devshop_pull', $project_node); 
  }
}
