<?php

/**
 * @file devshop_projects.module
 *
 * Provides Node Type, UI, and tools for DevShop Projects.
 */

include_once('inc/forms.inc');
include_once('inc/nodes.inc');
include_once('inc/tasks.inc');
include_once('inc/theme.inc');

// Lets keep front end code here.
include_once('inc/ui.inc');

/**
 * Implementation of hook_init()
 *
 * Adds a css file.
 */
function devshop_projects_init() {
  drupal_add_css(drupal_get_path('module', 'devshop_projects') . '/devshop-style.css', 'theme');
}

/**
 * Implementation of hook_perm()
 *
 * Since we have a node type, "create project content permission is
 * automatically added by Drupal
 */
function devshop_projects_perm() {
  return array(
    'view projects',
    'create devshop-create task',
    'create devshop-commit task',
    'create devshop-pull task',
    'create devshop-sync task',
    'create devshop-delete task',
    'create project',
    'view project', 
    'edit project',
    'delete projects',
    'administer projects',
  );
}

/**
 * Implementation of hook_menu()
 */
function devshop_projects_menu() {
  //Settings page.
  $items['admin/hosting/devshop'] = array(
    'title' => 'DevShop',
    'description' => 'Default values for use in creation project',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('devshop_projects_settings_form'),
    'access arguments' => array('administer projects'),
    'file' => 'admin.inc',
    'file path' => drupal_get_path('module', 'devshop_projects') . '/inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/hosting/devshop/projects'] = $items['admin/hosting/devshop'];
  $items['admin/hosting/devshop/projects']['title'] = 'Projects';
  $items['admin/hosting/devshop/projects']['type'] = MENU_DEFAULT_LOCAL_TASK;
  $items['admin/hosting/devshop/projects']['tab_parent'] = 'admin/hosting/devshop';

  $items['hosting/projects'] = array(
    'title' => t('Projects'),
    'description' => 'Display a list of all projects',
    'page callback' => 'devshop_projects_projects_page',
    'access arguments' => array('view projects'),
    'menu_name' => 'primary-links',
    'weight' => 1,
  );
  $items['hosting/projects/list'] = array(
    'title' => t('All Projects'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['hosting/projects/add'] = array(
    'title' => 'Start New Project',
    'type' => MENU_LOCAL_TASK,
    'title' => t('Start a new Project'), 
    'title callback' => 'check_plain', 
    'page callback' => 'devshop_projects_add', 
    'page arguments' => array(3), 
    'access callback' => 'node_access', 
    'access arguments' => array('create', 'project'), 
    'description' => 'Start a new Drupal website project.', 
    'file' => 'create-wizard.inc',
    'file path' => drupal_get_path('module', 'devshop_projects') . '/inc',
  );
  
  // Ajax endpoint for reloads
  $items['hosting/projects/add/status'] = array(
    'page callback' => 'devshop_projects_add_status',
    'access callback' => 'node_access', 
    'access arguments' => array('create', 'project'),
    'file' => 'create-wizard.inc',
    'file path' => drupal_get_path('module', 'devshop_projects') . '/inc',
  );
  
  // hosting tasks ajax pages.
  foreach (hosting_available_tasks('project') as $task => $info){
    $path = 'node/%/project_' . $task;
    $items[$path] = array(
      'title' => $info['title'],
      'description' => $info['description'],
      'page callback' => 'devshop_projects_hosting_task_confirm_form_page',
      'page arguments' => array(1, $task),
      'access callback' => 'hosting_task_menu_access_csrf',
      'access arguments' => array(1, $task),
      'type' => MENU_CALLBACK,
    );
    $items[$path] = array_merge($items[$path], $info);
  }
  
  return ($items);
}


/**
 * Implements hook_devshop_project_settings
 */
function devshop_projects_devshop_project_settings($project_node = NULL){
  if (!empty($project_node->git_branches)){
    $branch_options = array_combine($project_node->git_branches, $project_node->git_branches);
  } else {
    $branch_options = array();
  }
  
  $settings = array();
  $settings['git_branch'] = array(
    '#title' => t('Git Branch'),
    '#node_type' => 'platform',
    '#type' => 'select',
    '#options' => $branch_options,
  );

  $http_servers = hosting_get_servers('http');

  if (count($http_servers)) {
    $settings['web_server'] = array(
      '#title' => t('Web server'),
      '#node_type' => 'platform',
      '#type' => 'select',
      '#options' => $http_servers,
    );
  }

  $db_servers = hosting_get_servers('db');

  if (count($db_servers)) {
    $settings['db_server'] = array(
      '#title' => t('Database server'),
      '#node_type' => 'site',
      '#type' => 'select',
      '#options' => $db_servers,
    );
  }

  return $settings;
}


/**
 * Page Callback for hosting/projects/add
 */
function devshop_projects_add($step = NULL){
  if ($step == NULL){
    // Check to see if this project is still in the wizard
    ctools_include('object-cache');
    $project_wizard_cache = ctools_object_cache_get('project', NULL);
    if (!empty($project_wizard_cache->step)) {
      drupal_goto('hosting/projects/add/' . $project_wizard_cache->step);
    }
  }
  return devshop_projects_create_wizard($step);
}
/**
 * Replacement for hosting_task_confirm_form()
 *
 * @TODO: Remove once http://drupal.org/node/1861898 is committed.
 */ 
function devshop_projects_hosting_task_confirm_form_page($nid, $task){
  $node = node_load($nid);
  return drupal_get_form('hosting_task_confirm_form', $node, $task);
}

/**
 * Implementation of hook_menu_alter()
 *
 * Replaces node/add/project with a ctools wizard.
 */
function devshop_projects_menu_alter(&$items) {
  $items['node/add/project']['page callback'] = 'devshop_projects_create_wizard';
  $items['node/add/project']['page arguments'] = array(3);
  $items['node/add/project']['file'] = 'create-wizard.inc';
  $items['node/add/project']['file path'] = drupal_get_path('module', 'devshop_projects') . '/inc';

  // Make project node pages more user-friendly.
  $items['node/%node/view']['title callback'] = 'devshop_hosting_project_tab_title';
  $items['node/%node/view']['title arguments'] = array('View', 1);
  
  $items['node/%node/edit']['title callback'] = 'devshop_hosting_project_tab_title';
  $items['node/%node/edit']['title arguments'] = array('Edit', 1);

}

/**
 * Tab title replacer
 */ 
function devshop_hosting_project_tab_title($default, $node){
  if ($default == 'View' && $node->type == 'project'){
    return t('Dashboard'); 
  }
  if ($default == 'Edit' && $node->type == 'project'){
    return t('Settings'); 
  }
  
  // Otherwise, just return the page text
  return t($default);
}

/**
 * Task access controls
 *
 * This function defines which tasks should be showed to the user but
 * especially which will be accessible to him, in the permissions system.
 *
 * @arg $node object
 *   the node object we're trying to access
 *
 * @arg $task string
 *   the task type we're trying to do on the $node
 *
 * @see hosting_task_menu()
 */
function devshop_hosting_task_menu_access($node, $task) {
  if (!isset($node->nid)){
    $node = node_load($node);
  }

  if ($task != 'delete' && !$node->status) {
    return FALSE;
  }

  if (user_access("create " . $task . " task")) {
    if ($node->type == 'project') {
      
      // If Commit Features task, make sure features module is present
      if ($task == 'devshop-commit'){
        return _devshop_projects_project_has_module($node, 'features');
      } else {
        return TRUE;
      }
    }
  }
}

/**
 * Status of Project
 *
 * @TODO: When creating a new platform for an existing project, the status
 * goes back to "platforms not-verified"
 *
 * @param $node
 *   a project node
 */
function devshop_project_status($node){

  //Project status
  $platforms_ready = TRUE;
  $sites_ready = TRUE;
  $sites_installing = FALSE;

  // PROJECT STATUS
  if (empty($node->project_objects) && empty($node->git_branches)){
    return 'preparing-project';
  }

  // PLATFORMS STATUS: Determine if all platforms are verified.
  if (isset($node->project_objects['platform'])){
    foreach ($node->project_objects['platform'] as $nid => $env){
      $platform_nodes[$env] = node_load($nid);
      if (!empty($platform_nodes[$env]) && $platform_nodes[$env]->platform_status == 0){
        $platforms_ready = FALSE;
      }
    }
  } else {
    $platforms_ready = FALSE;
  }
  // SITES STATUS: Determine if sites exist and are enabled
  if ($platforms_ready && isset($node->project_objects['site'])){

    foreach ($node->project_objects['site'] as $nid => $env){
      $site_nodes[$env] = node_load($nid);
      if ($site_nodes[$env]->site_status == 0){
        $sites_ready = FALSE;
        $sites_installing = TRUE;
      }
    }
  } else {
    $sites_ready = FALSE;
  }
  
  
  // @TODO: This is so rough!  We can do better.
  return $sites_ready? 'sites_ready': (
    $sites_installing? 'sites_installing': (
      $platforms_ready? 'platforms_ready': 'platforms_verifying'
    )
  );
}

/**
 * Implements hook_hosting_drush_aliases_name()
 *
 * See http://drupal.org/project/hosting_drush_aliases
 */
function devshop_projects_hosting_drush_aliases_name($node) {
  if (isset($node->project_name)) {
    return $node->project_name .".". $node->project_environment;
  }
}

/**
 * Helper function to create a site in a project.
 * Used by Wizard & "Create Platform" > Post Verify
 */
function devshop_projects_create_site($project_node, $platform_node, $platform_name, $db_server = NULL) {
  global $user;

  // Create the site nodes
  $node = new stdClass();
  $node->type = 'site';
  $node->status = 1;
  $node->uid = $user->uid;
  $node->title = $platform_name .'.'. $project_node->base_url;

  // Aegir properties
  // @TODO: better client & DB support
  $node->client = HOSTING_DEFAULT_CLIENT;
  $servers = hosting_get_servers('db');
  $server = $db_server ? $db_server : key($servers);
  $node->db_server = $server;

  $node->platform = $platform_node->nid;

  // Lookup this platforms install profile
  $node->profile = db_result(db_query('SELECT nid FROM {hosting_package} WHERE short_name = "%s"', $project_node->install_profile));

  $node->environment = $platform_name;
  $node->git_branch = $platform_node->git_branch;
  $node->project = $project_node->title;

  // @TODO: Improve site language handling?
  $node->site_language = !empty($user->language)? $user->language: 'en';

  // Save the node
  if ($node = node_submit($node)) {
    node_save($node);
  }
  return $node;
}

/**
 * Nodemaker
 */
function _devshop_projects_node_create($type, $node = stdClass){
  global $user;

  // @TODO: Validate type
  $node->type = $type;
  $node->status = 1;
  $node->uid = $user->uid;
  $node->name = $user->name;
  if ($node = node_submit($node)) {
    node_save($node);
  }
  return $node;
}

/**
 * Check if a site has features diff enabled.
 */
function _devshop_projects_site_has_module($node, $module) {
  $param = array(
    'rid' => $node->nid,
    'p.short_name' => $module,
  );
  $package = hosting_package_instance_load($param);
  return $package->status;
}

/**
 * Check if a site has features diff enabled.
 */
function _devshop_projects_project_has_module($node, $module) {
  if (is_array($node->project_objects['site'])){
    $sites = array_flip($node->project_objects['site']);
  } else {
    $sites = array();
  }
  return _devshop_projects_site_has_module(node_load($sites['dev']), $module);
}

 /*
 * Delete a directory recursively
 */
function _devshop_rrmdir($dir) {
  if (is_dir($dir)) { 
     $objects = scandir($dir); 
     foreach ($objects as $object) { 
       if ($object != "." && $object != "..") { 
         if (filetype($dir."/".$object) == "dir") _devshop_rrmdir($dir."/".$object); else unlink($dir."/".$object); 
       } 
     } 
     reset($objects); 
     rmdir($dir); 
   } 
} 
